export LSCOLORS="Gxfxcxdxbxegedabagacad"
alias ls="ls -G"
alias l="ls"
alias ll="ls -la"
alias ltree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'"

alias subl="nocorrect subl"
alias rscp="rsync --partial --progress --rsh=ssh"
alias du1='du -h --max-depth=1'
alias fn='find . -name'
alias hi='history | tail -20'
alias pg="ps ax | grep -v grep | grep -i "
alias ip="ifconfig | grep 'inet '"

alias c="cd ~/src/cozy-ops/chef-repo"
alias p="cd ~/src/cozy-product"
alias inf="cd ~/src/cozy-ops/cozy-infrastructure"
#alias knife="nocorrect knife"
alias k="knife"
alias ks="knife status"
alias ksr="knife status -r"
alias ksg="knife status | grep"
alias role="nocorrect role"
alias node="nocorrect node"
alias environment="nocorrect environment"
alias cookbook="nocorrect cookbook"
alias krff="knife role from file"
alias keff="knife environment from file"
alias kdff="knife data bag from file"
alias kcu="knife cookbook upload"
ku() { knife cookbook upload $@ --freeze }
alias kssh="knife ssh"
alias knra="knife node run_list add"
alias knrr="knife node run_list remove"
dbagshow() { knife data bag show $@ -Fj }
edbagshow() { knife data bag show $@ -Fj --secret-file ~/src/cozy-ops/secret_data_bags/encrypted_data_bag_secret }

alias kefft="knife environment from file ~/src/cozy-ops/chef-repo/environments/testing.json"
alias keffs="knife environment from file ~/src/cozy-ops/chef-repo/environments/staging.json"
alias keffp="knife environment from file ~/src/cozy-ops/chef-repo/environments/production.json"
alias keffc="knife environment from file ~/src/cozy-ops/chef-repo/environments/ci.json"
alias keffi="knife environment from file ~/src/cozy-ops/chef-repo/environments/infrastructure.json"

alias b="berks"
alias bu="berks upload"

alias v="vagrant"
alias vu="vagrant up"
alias vup="vagrant up --provision"
alias vp="vagrant provision"
alias vd="vagrant destroy -f"
alias vr="vagrant reload"
alias vh="vagrant halt"
alias vs="vagrant status"
alias vssh="vagrant ssh"
alias vk="vd && rm Berksfile.lock && rm -rf ~/.berkshelf/default/vagrant && vu"
alias killvms='for i in `VBoxManage list runningvms | cut -d" " -f1 | sed "s/\"//g"`; do echo "killing $i"; VBoxManage controlvm $i poweroff; done'

alias g='git'
alias gst='git status'
alias gl='git up'
alias gup='git fetch && git rebase'
alias gp='git push'
gdv() { git diff -w "$@" | view - }
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gcm='git checkout master'
alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -D'
alias gcount='git shortlog -sn'
alias gcp='git cherry-pick'
alias glgp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --"
alias glg='git log --stat --max-count=5'
alias glgg='git log --graph --max-count=5'
alias glgo='git log --stat --oneline'
alias gss='git status -s'
alias ga='git add'
alias gm='git merge'
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'
alias grb='git rebase'

alias gf='git flow'
alias gff='git flow feature'
alias gffs='git flow feature start'
alias gffp='git flow feature publish'
alias gfff='git flow feature finish'
alias gfr='git flow release'
alias gfrs='git flow release start'
alias gfrp='git flow release publish'
alias gfrf='git flow release finish'
alias gfh='git flow hotfix'
alias gfhs='git flow hotfix start'
alias gfhp='git flow hotfix publish'
alias gfhf='git flow hotfix finish'

alias rspec='nocorrect rspec'
alias bundle='nocorrect bundle'

alias gam='~/src/GAM/src/gam.py'

#
# Will return the current branch name
# Usage example: git pull origin $(current_branch)
#
function current_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

function current_repository() {

  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo $(git remote -v | cut -d':' -f 2)
}

# these aliases take advantage of the previous function
alias ggpull='git pull origin $(current_branch)'
alias ggpush='git push origin $(current_branch)'
alias ggpnp='git pull origin $(current_branch) && git push origin $(current_branch)'

#some GitHub functions
# empty_gh [NAME_OF_REPO]
#
# Use this when creating a new repo from scratch.
empty_gh() { # [NAME_OF_REPO]
    repo = $1
    ghuser=$(  git config github.user )

    mkdir "$repo"
    cd "$repo"
    git init
    touch README
    git add README
    git commit -m 'Initial commit.'
    git remote add origin git@github.com:${ghuser}/${repo}.git
    git push -u origin master
}

# new_gh [DIRECTORY]
#
# Use this when you have a directory that is not yet set up for git.
# This function will add all non-hidden files to git.
new_gh() { # [DIRECTORY]
    cd "$1"
    ghuser=$( git config github.user )

    git init
    # add all non-dot files
    print '.*'"\n"'*~' >> .gitignore
    git add ^.*
    git commit -m 'Initial commit.'
    git remote add origin git@github.com:${ghuser}/${repo}.git
    git push -u origin master
}

# exist_gh [DIRECTORY]
#
# Use this when you have a git repo that's ready to go and you want to add it
# to your GitHub.
exist_gh() { # [DIRECTORY]
    cd "$1"
    name=$( git config user.name )
    ghuser=$( git config github.user )

    git remote add origin git@github.com:${ghuser}/${repo}.git
    git push -u origin master
}

new_repo() { #[NAME]
    mkdir "$1"
    cd "$1"
    rvm --ruby-version use 1.9.3@$1 --create
    echo "source 'http://rubygems.org'" > Gemfile
}

ruby_gemset() {
    rbenv gemset active 2>&1 | cut -d' ' -f1 -
}

csr() { # [Domain]
    openssl req -out $1.csr -new -newkey rsa:2048 -nodes -keyout $1.private.key
}

devmode()
{
        echo "Using Gemfile.devel for development mode."
            export BUNDLE_GEMFILE=Gemfile.devel
}

prodmode()
{
        echo "Using Gemfile for production mode."
            unset BUNDLE_GEMFILE
}

curlping()
{
    while true; do curl -sf -m3 $1 > /dev/null && echo -n '.' || echo -n 'F'; sleep 1; done
}

# Export env vars from a .env file when cd to a dir
cd()
{
	debug()
	{
		if [ $DOTENVSH_DEBUG = true ]; then
			echo $1
		fi
	}

	loadenv()
	{
		debug "Loading $1"
		for i in $(cat $1); do
			export $i
		done
	}

	builtin cd $@
	ERR=$?

	if [ $ERR -ne 0 ]; then; return $ERR; fi

	if [ -e .env ]; then
		loadenv .env
	fi
}
